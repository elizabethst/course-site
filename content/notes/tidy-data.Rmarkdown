---
title: "Tidy data"
date: 2019-03-01

type: docs
toc: true
draft: false
aliases: ["/datawrangle_tidy_data.html"]
categories: ["datawrangle"]

menu:
  notes:
    parent: Data wrangling
    weight: 7
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(cache = TRUE)
```

```{r packages, cache = FALSE, message = FALSE}
library(tidyverse)
```

Most data analysts and statisticians analyze data in a spreadsheet or tabular format. This is not the only way to store information,^[Computer scientists and web developers frequently make use of a range of other data types to store information.] however in the social sciences it has been the paradigm for many decades. **Tidy data** is a specific way of organizing data into a consistent format which plugs into the `tidyverse` set of packages for R. It is not the only way to store data and there are reasons why you might not store data in this format, but eventually you will probably need to convert your data to a tidy format in order to efficiently analyze it.

There are three rules which make a dataset **tidy**:

1. Each variable must have its own column.
2. Each observation must have its own row.
3. Each value must have its own cell.

![Figure 12.1 from [*R for Data Science*](http://r4ds.had.co.nz)](https://r4ds.had.co.nz/images/tidy-1.png)

Let's review the different tasks for tidying data using the R for Data Science `gapminder` subset. This is the data in a tidy format:

```{r tidy}
table1
```

Note that in this data frame, each variable is in its own column (`country`, `year`, `cases`, and `population`), each observation is in its own row (i.e. each row is a different country-year pairing), and each value has its own cell.

## Gathering

**Gathering** entails bringing a variable spread across multiple columns into a single column. For example, this version of `table1` is not tidy because the `year` variable is spread across multiple columns:

```{r spread-columns}
table4a
```

We can use the `gather()` function from the `tidyr` package to reshape the data frame and make this tidy. To do this we need three pieces of information:

1. The names of the columns that represent the values, not variables. Here, those are `1999` and `2000`.
1. The `key`, or the name of the variable whose values form the column names. Here that is `year`.
1. The `value`, or the name of the variable whose values are spread over the cells. Here that is `cases`. 

> Notice that we create the names for `key` and `value` - they do not already exist in the data frame.

We implement this using the `gather()` function:

```{r gather}
table4a %>% 
  gather(key = year, value = cases, `1999`, `2000`)
```

> In Stata and other statistics software, this operation would be called reshaping data wide to long.

## Spreading

**Spreading** brings an observation spread across multiple rows into a single row. It is the reverse of gathering. For instance, take `table2`:

```{r spread-rows}
table2
```

It violates the tidy data principle because each observation (unit of analysis is a country-year pairing) is split across multiple rows. To tidy the data frame, we need to know:

1. The `key` column, or the column that contains variable names. Here, it is `type`.
1. The `value` column, or the column that contains values for multiple variables. Here it is `count`.

> Notice that unlike for gathering, when spreading the `key` and `value` columns are already defined in the data frame. We do not create the names ourselves, only identify them in the existing data frame.

```{r spread}
table2 %>%
  spread(key = type, value = count)
```

> In Stata and other statistics software, this operation would be called reshaping data long to wide.

## Separating

**Separating** splits multiple variables stored in a single column into multiple columns. For example in `table3`, the `rate` column contains both `cases` and `population`:

```{r merged-columns}
table3
```

**This is a no-no**. Tidy data principles require each column to contain a single variable. We can use the `separate()` function to split the column into two new columns:

```{r separate}
table3 %>% 
  separate(col = rate, into = c("cases", "population"))
```

## Uniting

**Uniting** is the inverse of separating - when a variable is stored in multiple columns, uniting brings the variable back into a single column. `table5` splits the year variable into two columns:

```{r split-columns}
table5
```

To bring them back together, use the `unite()` function:

```{r unite}
table5 %>% 
  unite(col = new, century, year)

# remove underscore
table5 %>% 
  unite(col = new, century, year, sep = "")
```

## Session Info

```{r child = here::here("R", "_session-info.Rmd")}
```
