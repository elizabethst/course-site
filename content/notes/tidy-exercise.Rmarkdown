---
title: "Practice tidying data"
date: 2019-03-01

type: docs
toc: true
draft: false
aliases: ["/datawrangle_tidy_exercise.html"]
categories: ["datawrangle"]

menu:
  notes:
    parent: Data wrangling
    weight: 8
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(cache = TRUE)
```

```{r packages, cache = FALSE, message = FALSE}
library(tidyverse)
```

For each exercise, tidy the data frame. Before you write any code examine the structure of the data frame and mentally (or with pen-and-paper) sketch out what you think the tidy data structure should be.

## Race data

```{r race}
library(rcfss)
race
```

Important info:

* `Name` - pretty obvious
* `50`:`350` - column names define different lengths of time
* Cell values are scores associated with each name and length of time

<details> 
  <summary>Click for a hint</summary>
  <p>
  
**Tidy data structure**

```{r race-hint, echo = FALSE}
race %>%
  gather(key = Time, value = Score, -Name, convert = TRUE) %>%
  arrange(Name, Time)
```

  </p>
</details>

<details> 
  <summary>Click for the solution</summary>
  <p>

This is essentially a gathering operation. Except for the `Name` column, the remaining columns are actually one variable spread across multiple columns. The column names are a distinct variable, and the columns' values are another variable. We want to gather these columns. The `key` will tell us the original column name, and the `value` will give us the values in the cells. Because the column names are actually numeric values, we set `convert = TRUE` to coerce the new `Time` column into a numeric column (or vector). (The last line isn't necessary, but sorts the data frame in a consistent manner.)

```{r race-solution}
race %>%
  gather(key = Time, value = Score, -Name, convert = TRUE) %>%
  arrange(Name, Time)
```

  </p>
</details>

## Clinical trials

```{r results}
results
```

Important info:

* `Ind` - individual participating in the experiment
* `Treatment` - trial type (`Treat` or `Cont`)
* `value` - result of experiment

<details> 
  <summary>Click for a hint</summary>
  <p>
  
**Tidy data structure**

```{r results-hint, echo = FALSE}
results %>%
  spread(key = Treatment, value = value)
```

  </p>
</details>

<details> 
  <summary>Click for the solution</summary>
  <p>

This dataset is not tidy because observations are spread across multiple rows. There only needs to be one row for each individual. Then `Treat` and `Cont` can be stored in separate columns.

```{r results-solution}
results %>%
  spread(key = Treatment, value = value)
```

  </p>
</details>

## Grades

```{r grades}
grades
```

This one is a bit tougher. Important info:

* **The unit of analysis is ID-Year-Quarter.** That is, in the tidy formulation each observation represents one individual during one quarter in a given year.
* **Each test is unique.** As in they should be treated as two separate variables.

<details> 
  <summary>Click for a hint</summary>
  <p>

**Tidy data structure**

```{r grades-hint, echo = FALSE}
grades %>%
  gather(key = Quarter, value = Score, Fall:Winter) %>%
  mutate(Test = str_c("Test", Test)) %>%
  spread(key = Test, value = Score) %>%
  arrange(ID, Year, Quarter)
```

  </p>
</details>

<details> 
  <summary>Click for the solution</summary>
  <p>

In this example, the basic unit of observation is the test. Each individual takes two separate tests (labeled `1` and `2`) at multiple points in time: during each quarter (`Fall`, `Winter`, `Spring`) as well as in multiple years (`2008` and `2009`). So our final data frame should contain five columns: `ID` (identifying the student), `Year` (year the test was taken), `Quarter` (quarter in which the test was taken), `Test1` (score on the first test), and `Test2` (score on the second test).

Let's start with the gathering operation: we want to gather `Fall`, `Winter`, and `Spring` into a single column (we can use the inclusive select function `:` to gather these three columns):

```{r grades-gather}
grades %>%
  gather(key = Quarter, value = Score, Fall:Winter)
```

Good, but now we spread observations across multiple rows. Remember that we want each test to be a separate variable. To do that, we can spread those values across two columns.

```{r grades-spread}
grades %>%
  gather(key = Quarter, value = Score, Fall:Winter) %>%
  spread(key = Test, value = Score)
```

This is an acceptable solution, but look what happened to the column names for each test: they're labeled as numbers (`1` and `2`). We'd rather give columns text labels, since those are easier to reference in our code. We can use a function called `str_c()` from the `stringr` library to add text to the `Test` column before we spread it. `str_c()` combines two or more values together to create a single value:[^unite]

```{r grades-mutate}
library(stringr)

grades %>%
  gather(key = Quarter, value = Score, Fall:Winter) %>%
  mutate(Test = str_c("Test", Test))

grades %>%
  gather(key = Quarter, value = Score, Fall:Winter) %>%
  mutate(Test = str_c("Test", Test)) %>%
  spread(key = Test, value = Score)
```

If we're cleaning up the data frame, let's also arrange it in a logical order:

```{r grades-arrange}
grades %>%
  gather(key = Quarter, value = Score, Fall:Winter) %>%
  mutate(Test = str_c("Test", Test)) %>%
  spread(key = Test, value = Score) %>%
  arrange(ID, Year, Quarter)
```

[^unite]: You might think to use the `unite()` function here, but it won't work unless you first create a column which only contains the value `Test`, like so:

    ```{r grades-unite}
    grades %>%
      gather(key = Quarter, value = Score, Fall:Winter) %>%
      mutate(test_label = "Test") %>%
      unite(col = Test, test_label, Test)
    ```
    
    This works, but requires two lines of code instead of one.
    
  </p>
</details>

## Activities

```{r activities}
activities
```

This one is also pretty difficult, but if you think it through conceptually it is doable. The unit of analysis is a single individual (identified by `id`) observed at two different times (`T1` and `T2`) performing different actions (`work`, `play`, `talk`, and `total` - note that `total` is not merely the sum of the first three values). Individuals in this experiment were assigned to either treatment or control (`trt`) and this information should be preserved in the final data frame.

<details> 
  <summary>Click for a hint</summary>
  <p>
  
**Tidy data structure**

```{r activities-hint, echo = FALSE}
activities %>%
  gather(key = key, value = value, -id, -trt) %>%
  separate(col = key, into = c("location", "time")) %>%
  arrange(id, trt, time) %>%
  spread(key = location, value = value)
```

  </p>
</details>

<details> 
  <summary>Click for the solution</summary>
  <p>

This is a more complex operation. The basic problem is that we have variables stored in multiple columns (location, with possible values of `work`, `play`, and `talk`). We need to gather these columns into a single column for each variable. But what happens if we just gather them?

```{r activities-gather}
activities %>%
  gather(key = key, value = value, -id, -trt)
```

We've created a new problem! Actually, two problems:

1. We have a single observation stored across multiple rows: we want a single row for each `id` x `trt` pairing
2. We have two variables stored in a single column: `key` contains the information on both location (`work`, `play`, and `talk`) as well as when the measurement was taken (`T1` or `T2`)

The best approach is to fix the second problem by separating the columns, then spreading the different types of measurements back into their own columns.

```{r activities-separate-spread}
activities %>%
  gather(key = key, value = value, -id, -trt) %>%
  separate(col = key, into = c("location", "time"))

activities %>%
  gather(key = key, value = value, -id, -trt) %>%
  separate(col = key, into = c("location", "time")) %>%
  spread(key = location, value = value)
```

The whole operation in a single chain (with an `arrange()` thrown in to sort the data frame):

```{r activities-solution}
activities %>%
  gather(key = key, value = value, -id, -trt) %>%
  separate(key, into = c("location", "time")) %>%
  arrange(id, trt, time) %>%
  spread(key = location, value = value)
```

  </p>
</details>

## Session Info

```{r child = here::here("R", "_session-info.Rmd")}
```
